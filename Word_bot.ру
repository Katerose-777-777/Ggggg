import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .env

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ (—Ç–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ .env)
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
    exit(1)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class GameState(StatesGroup):
    active = State()

class GameSession:
    def __init__(self):
        self.used_words = set()
        self.last_word = None
        self.current_player = None
        self.players = []
        self.timer = None
        self.last_warning = False

games = {}

async def end_turn(chat_id: int):
    try:
        await asyncio.sleep(30)
        if chat_id in games and not games[chat_id].last_warning:
            session = games[chat_id]
            await bot.send_message(
                chat_id,
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ: {session.last_word.capitalize()}\n"
                f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(session.used_words)}\n"
                f"–ù–æ–≤–∞—è –∏–≥—Ä–∞: /start_game"
            )
            if chat_id in games:
                del games[chat_id]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ end_turn: {e}")

async def warn_10_seconds(chat_id: int):
    await asyncio.sleep(20)
    if chat_id in games:
        games[chat_id].last_warning = True
        await bot.send_message(chat_id, "‚è± –û—Å—Ç–∞–ª–æ—Å—å 10 —Å–µ–∫—É–Ω–¥!")

@dp.message_handler(commands=['start_game'], chat_type=['group', 'supergroup'])
async def cmd_start_game(message: types.Message):
    chat_id = message.chat.id
    if chat_id in games:
        await message.reply("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_game –¥–ª—è —Å–±—Ä–æ—Å–∞")
        return

    games[chat_id] = GameSession()
    games[chat_id].timer = asyncio.create_task(end_turn(chat_id))
    
    await GameState.active.set()
    await message.answer(
        "üéÆ <b>–ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
        "üìå <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        "1. –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø–∏—à–µ—Ç –ª—é–±–æ–µ —Å–ª–æ–≤–æ\n"
        "2. –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É\n"
        "3. –ù–∞ —Ö–æ–¥ - 30 —Å–µ–∫—É–Ω–¥\n"
        "4. –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞ –Ω–µ–ª—å–∑—è!\n\n"
        "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É: /stop_game\n"
        "‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!",
        parse_mode='HTML'
    )

@dp.message_handler(commands=['stop_game'], state='*', chat_type=['group', 'supergroup'])
async def cmd_stop_game(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    if chat_id in games:
        if games[chat_id].timer:
            games[chat_id].timer.cancel()
        del games[chat_id]
    await state.finish()
    await message.answer("üõë –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤–∞—è –∏–≥—Ä–∞: /start_game")

@dp.message_handler(state=GameState.active, chat_type=['group', 'supergroup'])
async def process_word(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    if chat_id not in games:
        return

    session = games[chat_id]
    user_id = message.from_user.id
    user_word = message.text.lower().strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–≤–∞
    if not user_word.isalpha() or len(user_word) < 2:
        await message.reply("‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)!")
        return

    if user_word in session.used_words:
        await message.reply("üîÑ –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å!")
        return

    if session.last_word and user_word[0] != session.last_word[-1]:
        await message.reply(f"üî° –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ '{session.last_word[-1]}'!")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    if session.timer:
        session.timer.cancel()
    session.timer = asyncio.create_task(end_turn(chat_id))
    asyncio.create_task(warn_10_seconds(chat_id))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    session.used_words.add(user_word)
    session.last_word = user_word
    session.current_player = user_id
    session.last_warning = False
    
    if user_id not in session.players:
        session.players.append(user_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    next_char = user_word[-1]
    await message.answer(
        f"‚úÖ <b>{message.from_user.first_name}</b> –≥–æ–≤–æ—Ä–∏—Ç: <i>{user_word.capitalize()}</i>\n"
        f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –Ω–∞: <b>'{next_char}'</b>\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(session.players)} | üìä –°–ª–æ–≤: {len(session.used_words)}\n"
        f"‚è± –£ –≤–∞—Å 30 —Å–µ–∫—É–Ω–¥!",
        parse_mode='HTML'
    )

if __name__ == '__main__':
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")